//===- lib/RuntimeErrors/RuntimeErrors.def --------------------------------===//
//
//                                    SeeC
//
// This file is distributed under The MIT License (MIT). See LICENSE.TXT for
// details.
//
//===----------------------------------------------------------------------===//
///
/// \file
/// SEEC_RUNERR(ID, Argument Type List)
///
//===----------------------------------------------------------------------===//

#include "seec/Preprocessor/Quote.h"

#ifndef SEEC_RUNERR
#error "Must define SEEC_RUNERR before including RuntimeErrors.def"
#endif


//===----------------------------------------------------------------------===//
// Additional Information/Notes
//===----------------------------------------------------------------------===//

SEEC_RUNERR(InfoCStdFunction,
  SEEC_PP_QUOTE(
    (function, seec::runtime_errors::ArgSelect
                 <seec::runtime_errors::format_selects::CStdFunction>)
  ))

SEEC_RUNERR(InfoCStdFunctionParameter,
  SEEC_PP_QUOTE(
    (function, seec::runtime_errors::ArgSelect
                 <seec::runtime_errors::format_selects::CStdFunction>),
    (parameter, seec::runtime_errors::ArgParameter)
  ))

SEEC_RUNERR(InfoElementOfArray,
  SEEC_PP_QUOTE(
    (element, seec::runtime_errors::ArgSize)
  ))


//===----------------------------------------------------------------------===//
// Top-level Errors
//===----------------------------------------------------------------------===//

//
// Access to unowned memory
//
SEEC_RUNERR(MemoryUnowned,
  SEEC_PP_QUOTE(
    (access_type, seec::runtime_errors::ArgSelect
                    <seec::runtime_errors::format_selects::MemoryAccess>),
    (address,     seec::runtime_errors::ArgAddress),
    (size,        seec::runtime_errors::ArgSize)
  ))

//
// Read from uninitialized memory
//
SEEC_RUNERR(MemoryUninitialized,
  SEEC_PP_QUOTE(
    (address, seec::runtime_errors::ArgAddress),
    (size,    seec::runtime_errors::ArgSize)
  ))

//
// Access to an object in memory overflows the object
//
SEEC_RUNERR(MemoryOverflow,
  SEEC_PP_QUOTE(
    (access_type,    seec::runtime_errors::ArgSelect
                       <seec::runtime_errors::format_selects::MemoryAccess>),
    (access_address, seec::runtime_errors::ArgAddress),
    (access_size,    seec::runtime_errors::ArgSize),
    (object,         seec::runtime_errors::ArgObject),
    (object_address, seec::runtime_errors::ArgAddress),
    (object_size,    seec::runtime_errors::ArgSize)
  ))

//
// Attempt to free unallocated memory
//
SEEC_RUNERR(BadDynamicMemoryAddress,
  SEEC_PP_QUOTE(
    (function, seec::runtime_errors::ArgSelect
                 <seec::runtime_errors::format_selects::CStdFunction>),
    (address,  seec::runtime_errors::ArgAddress)
  ))

//
// Overlapping blocks passed to function.
//
SEEC_RUNERR(OverlappingSourceDest,
  SEEC_PP_QUOTE(
    (function,  seec::runtime_errors::ArgSelect
                  <seec::runtime_errors::format_selects::CStdFunction>),
    (address,   seec::runtime_errors::ArgAddress),
    (size,      seec::runtime_errors::ArgSize)
  ))

//
// Invalid C string passed to function..
//
SEEC_RUNERR(InvalidCString,
  SEEC_PP_QUOTE(
    (function,  seec::runtime_errors::ArgSelect
                  <seec::runtime_errors::format_selects::CStdFunction>),
    (address,   seec::runtime_errors::ArgAddress),
    (parameter, seec::runtime_errors::ArgParameter)
  ))

//
// Divide-by-zero
//
SEEC_RUNERR(DivideByZero,
  SEEC_PP_QUOTE(
    (dummy, seec::runtime_errors::ArgObject)
  ))

//
// Integer overflow
//
SEEC_RUNERR(IntegerOverflow,
  SEEC_PP_QUOTE(
    (dummy, seec::runtime_errors::ArgObject)
  ))

//
// Integer underflow
//
SEEC_RUNERR(IntegerUnderflow,
  SEEC_PP_QUOTE(
    (dummy, seec::runtime_errors::ArgObject)
  ))

//
// Dereference a pointer that does not reference an object!
//
SEEC_RUNERR(PointerObjectNULL,
  SEEC_PP_QUOTE(
    (address, seec::runtime_errors::ArgAddress)
  ))

//
// Dereference a pointer that does not refer to its original object.
//
SEEC_RUNERR(PointerObjectMismatch,
  SEEC_PP_QUOTE(
    (object,  seec::runtime_errors::ArgAddress),
    (address, seec::runtime_errors::ArgAddress)
  ))

//
// Passing a pointer to unowned memory to a function.
//
SEEC_RUNERR(PassPointerToUnowned,
  SEEC_PP_QUOTE(
    (function,  seec::runtime_errors::ArgSelect
                  <seec::runtime_errors::format_selects::CStdFunction>),
    (address,   seec::runtime_errors::ArgAddress),
    (parameter, seec::runtime_errors::ArgParameter)
  ))

//
// Passing a pointer to uninitialized memory to a function.
//
SEEC_RUNERR(PassPointerToUninitialized,
  SEEC_PP_QUOTE(
    (function,  seec::runtime_errors::ArgSelect
                  <seec::runtime_errors::format_selects::CStdFunction>),
    (address,   seec::runtime_errors::ArgAddress),
    (parameter, seec::runtime_errors::ArgParameter)
  ))

//
// Passing a pointer to an object of insufficient size to a function.
//
SEEC_RUNERR(PassPointerToInsufficient,
  SEEC_PP_QUOTE(
    (function,        seec::runtime_errors::ArgSelect
                        <seec::runtime_errors::format_selects::CStdFunction>),
    (parameter,       seec::runtime_errors::ArgParameter),
    (access_address,  seec::runtime_errors::ArgAddress),
    (access_size,     seec::runtime_errors::ArgSize),
    (accessible_size, seec::runtime_errors::ArgSize),
    (object,          seec::runtime_errors::ArgObject),
    (object_address,  seec::runtime_errors::ArgAddress),
    (object_size,     seec::runtime_errors::ArgSize)
  ))

//
// Passing an invalid FILE * to a standard library function.
//
SEEC_RUNERR(PassInvalidStream,
  SEEC_PP_QUOTE(
    (function,  seec::runtime_errors::ArgSelect
                  <seec::runtime_errors::format_selects::CStdFunction>),
    (parameter, seec::runtime_errors::ArgParameter)
  ))

//
// Using a standard library function which will read/write an invalid standard
// stream (stdout, stderr, or stdin).
//
SEEC_RUNERR(UseInvalidStream,
  SEEC_PP_QUOTE(
    (function,  seec::runtime_errors::ArgSelect
                  <seec::runtime_errors::format_selects::CStdFunction>),
    (stream,    seec::runtime_errors::ArgSelect
                  <seec::runtime_errors::format_selects::CStdStream>)
  ))

//
// Passing an invalid DIR * to a POSIX function.
//
SEEC_RUNERR(PassInvalidDIR,
  SEEC_PP_QUOTE(
    (function,  seec::runtime_errors::ArgSelect
                  <seec::runtime_errors::format_selects::CStdFunction>),
    (parameter, seec::runtime_errors::ArgParameter)
  ))

//
// Error parsing a conversion specifier in a standard library string formatting
// function.
//   function: The function being called.
//   parameter: The parameter of the format string.
//   start: The position of the '%' that began the conversion specifier.
//
SEEC_RUNERR(FormatSpecifierParse,
  SEEC_PP_QUOTE(
    (function,  seec::runtime_errors::ArgSelect
                  <seec::runtime_errors::format_selects::CStdFunction>),
    (parameter, seec::runtime_errors::ArgParameter),
    (start,     seec::runtime_errors::ArgSize)
  ))

//
// Invalid flag supplied for a conversion specifier in a standard library
// string formatting function.
//   function: The function being called.
//   parameter: The parameter of the format string.
//   start: The position of the '%' that began the conversion specifier.
//   end: The position of the first character following the specifier.
//   flag: The invalid flag character.
//
SEEC_RUNERR(FormatSpecifierFlag,
  SEEC_PP_QUOTE(
    (function,  seec::runtime_errors::ArgSelect
                  <seec::runtime_errors::format_selects::CStdFunction>),
    (parameter, seec::runtime_errors::ArgParameter),
    (start,     seec::runtime_errors::ArgSize),
    (end,       seec::runtime_errors::ArgSize),
    (flag,      seec::runtime_errors::ArgCharacter)
  ))

//
// Width was provided to a conversion specifier that does not allow width.
//   function: The function being called.
//   parameter: The parameter of the format string.
//   start: The position of the '%' that began the conversion specifier.
//   end: The position of the first character following the specifier.
//
SEEC_RUNERR(FormatSpecifierWidthDenied,
  SEEC_PP_QUOTE(
    (function,  seec::runtime_errors::ArgSelect
                  <seec::runtime_errors::format_selects::CStdFunction>),
    (parameter, seec::runtime_errors::ArgParameter),
    (start,     seec::runtime_errors::ArgSize),
    (end,       seec::runtime_errors::ArgSize)
  ))

//
// Width was specified to be passed as an argument, but the relevant argument
// had an incorrect type (i.e. not int).
//
//   function: The function being called.
//   parameter: The parameter of the format string.
//   start: The position of the '%' that began the conversion specifier.
//   end: The position of the first character following the specifier.
//   width_parameter: The parameter of the width argument.
//
SEEC_RUNERR(FormatSpecifierWidthArgType,
  SEEC_PP_QUOTE(
    (function,        seec::runtime_errors::ArgSelect
                        <seec::runtime_errors::format_selects::CStdFunction>),
    (parameter,       seec::runtime_errors::ArgParameter),
    (start,           seec::runtime_errors::ArgSize),
    (end,             seec::runtime_errors::ArgSize),
    (width_parameter, seec::runtime_errors::ArgParameter)
  ))

//
// Width was not specified for a conversion specifier where failing to specify
// the width may lead to a buffer overflow (i.e. %s or %[ with scan functions).
//
//   function: The function being called.
//   parameter: The parameter of the format string.
//   start: The position of the '%' that began the conversion specifier.
//   end: The position of the first character following the specifier.
//
SEEC_RUNERR(FormatSpecifierWidthMissing,
  SEEC_PP_QUOTE(
    (function,        seec::runtime_errors::ArgSelect
                        <seec::runtime_errors::format_selects::CStdFunction>),
    (parameter,       seec::runtime_errors::ArgParameter),
    (start,           seec::runtime_errors::ArgSize),
    (end,             seec::runtime_errors::ArgSize)
  ))

//
// Precision was provided to a conversion specifier that does not allow
// precision.
//   function: The function being called.
//   parameter: The parameter of the format string.
//   start: The position of the '%' that began the conversion specifier.
//   end: The position of the first character following the specifier.
//
SEEC_RUNERR(FormatSpecifierPrecisionDenied,
  SEEC_PP_QUOTE(
    (function,  seec::runtime_errors::ArgSelect
                  <seec::runtime_errors::format_selects::CStdFunction>),
    (parameter, seec::runtime_errors::ArgParameter),
    (start,     seec::runtime_errors::ArgSize),
    (end,       seec::runtime_errors::ArgSize)
  ))

//
// Precision was specified to be passed as an argument, but the relevant
// argument had an incorrect type (i.e. not int).
//
//   function: The function being called.
//   parameter: The parameter of the format string.
//   start: The position of the '%' that began the conversion specifier.
//   end: The position of the first character following the specifier.
//   precision_parameter: The parameter of the precision argument.
//
SEEC_RUNERR(FormatSpecifierPrecisionArgType,
  SEEC_PP_QUOTE(
    (function,            seec::runtime_errors::ArgSelect
                          <seec::runtime_errors::format_selects::CStdFunction>),
    (parameter,           seec::runtime_errors::ArgParameter),
    (start,               seec::runtime_errors::ArgSize),
    (end,                 seec::runtime_errors::ArgSize),
    (precision_parameter, seec::runtime_errors::ArgParameter)
  ))

//
// An invalid length modifier was provided for a conversion specifier.
//   function: The function being called.
//   parameter: The parameter of the format string.
//   start: The position of the '%' that began the conversion specifier.
//   end: The position of the first character following the specifier.
//   length: The length modifier.
//
SEEC_RUNERR(FormatSpecifierLengthDenied,
  SEEC_PP_QUOTE(
    (function,  seec::runtime_errors::ArgSelect
                  <seec::runtime_errors::format_selects::CStdFunction>),
    (parameter, seec::runtime_errors::ArgParameter),
    (start,     seec::runtime_errors::ArgSize),
    (end,       seec::runtime_errors::ArgSize),
    (length,    seec::runtime_errors::ArgSelect
                  <seec::runtime_errors::format_selects::CFormatLengthModifier>)
  ))

//
// The assignment suppression indicator '*' was provided for a scan conversion
// that does not allow assignment suppression.
//
//   function: The function being called.
//   parameter: The parameter of the format string.
//   start: The position of the '%' that began the conversion specifier.
//   end: The position of the first character following the specifier.
//
SEEC_RUNERR(FormatSpecifierSuppressionDenied,
  SEEC_PP_QUOTE(
    (function,  seec::runtime_errors::ArgSelect
                  <seec::runtime_errors::format_selects::CStdFunction>),
    (parameter, seec::runtime_errors::ArgParameter),
    (start,     seec::runtime_errors::ArgSize),
    (end,       seec::runtime_errors::ArgSize)
  ))

//
// An incorrectly typed argument was provided for a conversion specifier.
//   function: The function being called.
//   parameter: The parameter of the format string.
//   start: The position of the '%' that began the conversion specifier.
//   end: The position of the first character following the specifier.
//   length: The length modifier.
//   argument: The parameter index of the incorrectly-typed argument.
//
SEEC_RUNERR(FormatSpecifierArgType,
  SEEC_PP_QUOTE(
    (function,  seec::runtime_errors::ArgSelect
                <seec::runtime_errors::format_selects::CStdFunction>),
    (parameter, seec::runtime_errors::ArgParameter),
    (start,     seec::runtime_errors::ArgSize),
    (end,       seec::runtime_errors::ArgSize),
    (length,    seec::runtime_errors::ArgSelect
                <seec::runtime_errors::format_selects::CFormatLengthModifier>),
    (argument,  seec::runtime_errors::ArgParameter)
  ))

//
//
//
SEEC_RUNERR(ScanFormattedStringOverflow,
  SEEC_PP_QUOTE(
    (function,         seec::runtime_errors::ArgSelect
                         <seec::runtime_errors::format_selects::CStdFunction>),
    (format_index,     seec::runtime_errors::ArgParameter),
    (specifier_start,  seec::runtime_errors::ArgSize),
    (specifier_end,    seec::runtime_errors::ArgSize),
    (specifier_length,
       seec::runtime_errors::ArgSelect
       <seec::runtime_errors::format_selects::CFormatLengthModifier>),
    (argument,         seec::runtime_errors::ArgParameter),
    (bytes_available,  seec::runtime_errors::ArgSize),
    (bytes_required,   seec::runtime_errors::ArgSize)
  ))

//
// Too many arguments supplied to variadic function.
//   function: The function being called.
//   expected: The number of variadic arguments expected.
//   received: The number of variadic arguments received.
//
SEEC_RUNERR(VarArgsSuperfluous,
  SEEC_PP_QUOTE(
    (function, seec::runtime_errors::ArgSelect
                 <seec::runtime_errors::format_selects::CStdFunction>),
    (expected, seec::runtime_errors::ArgSize),
    (received, seec::runtime_errors::ArgSize)
  ))

//
// Too few arguments supplied to variadic function.
//   function: The function being called.
//   expected: The number of variadic arguments expected.
//   received: The number of variadic arguments received.
//
SEEC_RUNERR(VarArgsInsufficient,
  SEEC_PP_QUOTE(
    (function, seec::runtime_errors::ArgSelect
                 <seec::runtime_errors::format_selects::CStdFunction>),
    (expected, seec::runtime_errors::ArgSize),
    (received, seec::runtime_errors::ArgSize)
  ))

//
// Received an arg that was not of type "char *" in a varargs list that expects
// character pointers (e.g. execl).
//
SEEC_RUNERR(VarArgsExpectedCharPointer,
  SEEC_PP_QUOTE(
    (function,  seec::runtime_errors::ArgSelect
                  <seec::runtime_errors::format_selects::CStdFunction>)
  ))

//
// Received an arg that was not of type "char * const *" in a varargs list that
// expects that type (execle).
//
SEEC_RUNERR(VarArgsExpectedCStringArray,
  SEEC_PP_QUOTE(
    (function,  seec::runtime_errors::ArgSelect
                  <seec::runtime_errors::format_selects::CStdFunction>)
  ))

//
// Passing a non-terminated varargs pointer list to a function that requires
// it be NULL terminated (e.g. execl).
//
SEEC_RUNERR(VarArgsNonTerminated,
  SEEC_PP_QUOTE(
    (function,  seec::runtime_errors::ArgSelect
                  <seec::runtime_errors::format_selects::CStdFunction>)
  ))

//
// Passing a NULL terminated varargs list with items following the terminator.
//
SEEC_RUNERR(VarArgsPostTerminator,
  SEEC_PP_QUOTE(
    (function,  seec::runtime_errors::ArgSelect
                  <seec::runtime_errors::format_selects::CStdFunction>)
  ))

//
// Called a function that is unsafe in the presence of multiple threads.
//
SEEC_RUNERR(UnsafeMultithreaded,
  SEEC_PP_QUOTE(
    (function, seec::runtime_errors::ArgSelect
                 <seec::runtime_errors::format_selects::CStdFunction>)
  ))

//
// Passing a non-terminated array to a function that requires a terminated
// array (e.g. the string arrays passed to execve).
//
SEEC_RUNERR(NonTerminatedArray,
  SEEC_PP_QUOTE(
    (function,  seec::runtime_errors::ArgSelect
                  <seec::runtime_errors::format_selects::CStdFunction>),
    (parameter, seec::runtime_errors::ArgParameter)
  ))

//
// Stack limit will be exceeded by alloca.
//
SEEC_RUNERR(StackOverflowAlloca,
  SEEC_PP_QUOTE(
    (dummy, seec::runtime_errors::ArgAddress)
  ))

#undef SEEC_RUNERR
