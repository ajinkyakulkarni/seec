//===- include/seec/Trace/DetectCalls/DetectCallsCstdio.def ---------------===//
//
//                                    SeeC
//
// This file is distributed under The MIT License (MIT). See LICENSE.TXT for
// details.
//
//===----------------------------------------------------------------------===//
///
/// \file
/// Included by include/seec/Trace/DetectCallsAll.def. Do not include this file
/// directly!
///
//===----------------------------------------------------------------------===//

// File access.

DETECT_CALL(C, fopen,   SEEC_PP_QUOTE(char const *, char const *))
DETECT_CALL(C, freopen, SEEC_PP_QUOTE(char const *, char const *, FILE *))
DETECT_CALL(C, fclose,  SEEC_PP_QUOTE(FILE *))
DETECT_CALL(C, fflush,  SEEC_PP_QUOTE(FILE *))
DETECT_CALL(C, fwide,   SEEC_PP_QUOTE(FILE *, int))
DETECT_CALL(C, setbuf,  SEEC_PP_QUOTE(FILE *, char *))
DETECT_CALL(C, setvbuf, SEEC_PP_QUOTE(FILE *, char *, int, size_t))


// Direct input/output.

DETECT_CALL(C, fread,  SEEC_PP_QUOTE(void *, size_t, size_t, FILE *))
DETECT_CALL(C, fwrite, SEEC_PP_QUOTE(void *, size_t, size_t, FILE *))


// Unformatted input/output.

DETECT_CALL(C, fgetc, SEEC_PP_QUOTE(FILE *))
DETECT_CALL(C, getc, SEEC_PP_QUOTE(FILE *))
DETECT_CALL(C, fgets, SEEC_PP_QUOTE(char *, int, FILE *))
DETECT_CALL(C, fputc, SEEC_PP_QUOTE(int, FILE *))
DETECT_CALL(C, putc, SEEC_PP_QUOTE(int, FILE *))
DETECT_CALL(C, fputs, SEEC_PP_QUOTE(char const *, FILE *))
DETECT_CALL(C, getchar, SEEC_PP_QUOTE())
DETECT_CALL(C, gets, SEEC_PP_QUOTE(char const *))
DETECT_CALL(C, putchar, SEEC_PP_QUOTE(int))
DETECT_CALL(C, puts, SEEC_PP_QUOTE(char const *))
DETECT_CALL(C, ungetc, SEEC_PP_QUOTE(int, FILE *))


// Formatted input/output.

DETECT_CALL(C, scanf,
            SEEC_PP_QUOTE(char const *,
                          seec::trace::detect_calls::VarArgList<LT>))

DETECT_CALL(C, fscanf,
            SEEC_PP_QUOTE(FILE *,
                          char const *,
                          seec::trace::detect_calls::VarArgList<LT>))

DETECT_CALL(C, sscanf,
            SEEC_PP_QUOTE(char const *,
                          char const *,
                          seec::trace::detect_calls::VarArgList<LT>))

// TODO: vscanf, vfscanf, vsscanf.

DETECT_CALL(C, printf,
            SEEC_PP_QUOTE(char const *,
                          seec::trace::detect_calls::VarArgList<LT>))

DETECT_CALL(C, fprintf,
            SEEC_PP_QUOTE(FILE *,
                          char const *,
                          seec::trace::detect_calls::VarArgList<LT>))

DETECT_CALL(C, sprintf,
            SEEC_PP_QUOTE(char *,
                          char const *,
                          seec::trace::detect_calls::VarArgList<LT>))

DETECT_CALL(C, snprintf,
            SEEC_PP_QUOTE(char *,
                          int,
                          char const *,
                          seec::trace::detect_calls::VarArgList<LT>))

// File positioning.

DETECT_CALL(C, ftell, SEEC_PP_QUOTE(FILE *))
DETECT_CALL(C, fgetpos, SEEC_PP_QUOTE(FILE *, fpos_t *))
DETECT_CALL(C, fseek, SEEC_PP_QUOTE(FILE *, long int, int))
DETECT_CALL(C, fsetpos, SEEC_PP_QUOTE(FILE *, fpos_t const *))
DETECT_CALL(C, rewind, SEEC_PP_QUOTE(FILE *))


// Error handling.

DETECT_CALL(C, clearerr, SEEC_PP_QUOTE(FILE *))
DETECT_CALL(C, feof, SEEC_PP_QUOTE(FILE *))
DETECT_CALL(C, ferror, SEEC_PP_QUOTE(FILE *))
DETECT_CALL(C, perror, SEEC_PP_QUOTE(char const *))


// Operations on files.

DETECT_CALL(C, remove, SEEC_PP_QUOTE(char const *))
DETECT_CALL(C, rename, SEEC_PP_QUOTE(char const *, char const *))
DETECT_CALL(C, tmpfile, SEEC_PP_QUOTE())
DETECT_CALL(C, tmpnam, SEEC_PP_QUOTE(char *))
