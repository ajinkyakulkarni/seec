//
// SEEC_TRACE_EVENT(
//  EventName,
//  Properties---,
//  Traits---
//
// Where Properties is a quoted list (created with SEEC_PP_QUOTE), and each
// element in the list takes the form:
//  (Type, Name)
//
// And Traits is a quoted list (created with SEEC_PP_QUOTE), and each element
// in the list takes the form:
//  (Name)
//

#ifndef SEEC_TRACE_EVENT
#error "Must define SEEC_TRACE_EVENT before including Events.def"
#endif

#include "seec/Preprocessor/Quote.h"

SEEC_TRACE_EVENT(TraceEnd,
  SEEC_PP_QUOTE(
    (uint64_t, Dummy)
  ),
  SEEC_PP_QUOTE(
    (TraceEnd, is_block_start)
  ))

SEEC_TRACE_EVENT(FunctionStart,
  SEEC_PP_QUOTE(
    (offset_uint, Record)
  ),
  SEEC_PP_QUOTE(
    (FunctionStart, is_block_start)
  ))
  
SEEC_TRACE_EVENT(FunctionEnd,
  SEEC_PP_QUOTE(
    (offset_uint, Record)
  ),
  SEEC_PP_QUOTE(
    (FunctionEnd, is_block_start)
  ))

SEEC_TRACE_EVENT(BasicBlockStart,
  SEEC_PP_QUOTE(
    (uint32_t, Index),
    (offset_uint, PreviousAny),
    (offset_uint, PreviousSame)
  ),
  SEEC_PP_QUOTE(
    (BasicBlockStart, is_block_start),
    (BasicBlockStart, is_function_level)
  ))
  
SEEC_TRACE_EVENT(NewProcessTime,
  SEEC_PP_QUOTE(
    (uint64_t, ProcessTime)
  ),
  SEEC_PP_QUOTE(
    (NewProcessTime, is_block_start)
  ))

SEEC_TRACE_EVENT(PreInstruction,
  SEEC_PP_QUOTE(
    (uint32_t, Index),
    (uint64_t, ThreadTime)
  ),
  SEEC_PP_QUOTE(
    (PreInstruction, is_block_start),
    (PreInstruction, is_function_level),
    (PreInstruction, is_instruction)
  ))

SEEC_TRACE_EVENT(Instruction,
  SEEC_PP_QUOTE(
    (uint32_t, Index),
    (uint64_t, ThreadTime)
  ),
  SEEC_PP_QUOTE(
    (Instruction, is_block_start),
    (Instruction, is_function_level),
    (Instruction, is_instruction)
  ))

SEEC_TRACE_EVENT(InstructionWithSmallValue,
  SEEC_PP_QUOTE(
    (uint16_t, Value),
    (uint32_t, Index),
    (uint64_t, ThreadTime),
    (offset_uint, PreviousSame)
  ),
  SEEC_PP_QUOTE(
    (InstructionWithSmallValue, is_block_start),
    (InstructionWithSmallValue, is_function_level),
    (InstructionWithSmallValue, is_instruction)
  ))

SEEC_TRACE_EVENT(InstructionWithValue,
  SEEC_PP_QUOTE(
    (uint32_t, Index),
    (uint64_t, ThreadTime),
    (offset_uint, PreviousSame),
    (RuntimeValueRecord, Value)
  ),
  SEEC_PP_QUOTE(
    (InstructionWithValue, is_block_start),
    (InstructionWithValue, is_function_level),
    (InstructionWithValue, is_instruction)
  ))

SEEC_TRACE_EVENT(InstructionWithLargeValue,
  SEEC_PP_QUOTE(
    (uint32_t, Index),
    (uint64_t, ThreadTime),
    (offset_uint, PreviousSame),
    (offset_uint, DataOffset)
  ),
  SEEC_PP_QUOTE(
    (InstructionWithLargeValue, is_block_start),
    (InstructionWithLargeValue, is_function_level),
    (InstructionWithLargeValue, is_instruction)
  ))

SEEC_TRACE_EVENT(Alloca,
  SEEC_PP_QUOTE(
    (std::size_t, ElementSize),
    (std::size_t, ElementCount)
  ),
  SEEC_PP_QUOTE(
    (Alloca, is_function_level)
  ))

SEEC_TRACE_EVENT(StackRestore,
  SEEC_PP_QUOTE(
    (offset_uint, Previous)
  ),
  SEEC_PP_QUOTE(
    (StackRestore, is_function_level)
  ))

SEEC_TRACE_EVENT(StackRestoreAlloca,
  SEEC_PP_QUOTE(
    (offset_uint, Alloca)
  ),
  SEEC_PP_QUOTE(
    (StackRestoreAlloca, is_function_level),
    (StackRestoreAlloca, is_subservient)
  ))

SEEC_TRACE_EVENT(Malloc,
  SEEC_PP_QUOTE(
    (std::size_t, Size),
    (uint64_t, ProcessTime)
  ),
  SEEC_PP_QUOTE(
    (Malloc, modifies_shared_state)
  ))

SEEC_TRACE_EVENT(Free,
  SEEC_PP_QUOTE(
    (uint32_t, MallocThread),
    (offset_uint, MallocOffset),
    (uint64_t, ProcessTime)
  ),
  SEEC_PP_QUOTE(
    (Free, modifies_shared_state)
  ))

SEEC_TRACE_EVENT(StateTyped,
  SEEC_PP_QUOTE(
    (uint32_t, Overwritten),
    (uintptr_t, Address),
    (uint64_t, ProcessTime),
    (offset_uint, ValueOffset)
  ),
  SEEC_PP_QUOTE(
    (StateTyped, modifies_shared_state),
    (StateTyped, is_memory_state)
  ))

SEEC_TRACE_EVENT(StateUntypedSmall,
  SEEC_PP_QUOTE(
    (uint8_t, Size),
    (uint32_t, Overwritten),
    (uintptr_t, Address),
    (uint64_t, ProcessTime),
    (uint64_t, Data)
  ),
  SEEC_PP_QUOTE(
    (StateUntypedSmall, modifies_shared_state),
    (StateUntypedSmall, is_memory_state)
  ))

SEEC_TRACE_EVENT(StateUntyped,
  SEEC_PP_QUOTE(
    (uint32_t, Overwritten),
    (uintptr_t, Address),
    (uint64_t, ProcessTime),
    (offset_uint, DataOffset),
    (std::size_t, DataSize)
  ),
  SEEC_PP_QUOTE(
    (StateUntyped, modifies_shared_state),
    (StateUntyped, is_memory_state)
  ))

SEEC_TRACE_EVENT(StateMemmove,
  SEEC_PP_QUOTE(
    (uint32_t, Overwritten),
    (uint64_t, ProcessTime),
    (uintptr_t, SourceAddress),
    (uintptr_t, DestinationAddress),
    (std::size_t, Size)
  ),
  SEEC_PP_QUOTE(
    (StateMemmove, modifies_shared_state),
    (StateMemmove, is_memory_state)
  ))

SEEC_TRACE_EVENT(StateClear,
  SEEC_PP_QUOTE(
    (uint32_t, Overwritten),
    (uintptr_t, Address),
    (uint64_t, ProcessTime),
    (std::size_t, ClearSize)
  ),
  SEEC_PP_QUOTE(
    (StateClear, modifies_shared_state)
  ))

SEEC_TRACE_EVENT(StateOverwrite,
  SEEC_PP_QUOTE(
    (uint32_t, StateThreadID),
    (offset_uint, StateOffset)
  ),
  SEEC_PP_QUOTE(
    (StateOverwrite, is_subservient)
  ))

SEEC_TRACE_EVENT(StateOverwriteFragment,
  SEEC_PP_QUOTE(
    (uint32_t, StateThreadID),
    (offset_uint, StateOffset),
    (uintptr_t, FragmentAddress),
    (std::size_t, FragmentSize)
  ),
  SEEC_PP_QUOTE(
    (StateOverwriteFragment, is_subservient)
  ))

SEEC_TRACE_EVENT(StateOverwriteFragmentTrimmedRight,
  SEEC_PP_QUOTE(
    (uintptr_t, AddressOfBlock),
    (std::size_t, AmountTrimmed)
  ),
  SEEC_PP_QUOTE(
    (StateOverwriteFragmentTrimmedRight, is_subservient)
  ))

SEEC_TRACE_EVENT(StateOverwriteFragmentTrimmedLeft,
  SEEC_PP_QUOTE(
    (uintptr_t, TrimmedAddressOfBlock),
    (uintptr_t, PreviousAddressOfBlock)
  ),
  SEEC_PP_QUOTE(
    (StateOverwriteFragmentTrimmedLeft, is_subservient)
  ))

SEEC_TRACE_EVENT(StateOverwriteFragmentSplit,
  SEEC_PP_QUOTE(
    (uintptr_t, AddressOfLeftBlock),
    (uintptr_t, AddressOfRightBlock)
  ),
  SEEC_PP_QUOTE(
    (StateOverwriteFragmentSplit, is_subservient)
  ))

SEEC_TRACE_EVENT(RuntimeError,
  SEEC_PP_QUOTE(
    (uint16_t, ErrorType),
    (uint32_t, ArgumentCount)
  ),
  SEEC_PP_QUOTE(
    (RuntimeError, no_traits)
  ))

SEEC_TRACE_EVENT(RuntimeErrorArgument,
  SEEC_PP_QUOTE(
    (uint8_t, ArgumentType),
    (uint64_t, ArgumentData)
  ),
  SEEC_PP_QUOTE(
    (RuntimeErrorArgument, is_subservient)
  ))

#undef SEEC_TRACE_EVENT
