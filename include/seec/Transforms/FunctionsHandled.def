//===- include/seec/Transforms/FunctionsHandled.def -----------------------===//
//
//                                    SeeC
//
// This file is distributed under The MIT License (MIT). See LICENSE.TXT for
// details.
//
//===----------------------------------------------------------------------===//
///
/// \file
///
//===----------------------------------------------------------------------===//

#ifndef SEEC_FUNCTION_HANDLED
#define SEEC_FUNCTION_HANDLED(NAME)
#endif

//===----------------------------------------------------------------------===//
// All detected calls are handled!
//
#ifdef DETECT_CALL
#error "FunctionsInstrumented.def uses DETECT_CALL internally."
#endif

#define DETECT_CALL(PREFIX, CALL, ARGTYPES) \
SEEC_FUNCTION_HANDLED(CALL)

#include "seec/Trace/DetectCallsAll.def"
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// All intercepted functions are handled!
//
#ifdef SEEC_INTERCEPTED_FUNCTION
#error "FunctionsInstrumented.def uses SEEC_INTERCEPTED_FUNCTION internally."
#endif

#define SEEC_INTERCEPTED_FUNCTION(NAME) \
SEEC_FUNCTION_HANDLED(NAME)

#define SEEC_INTERCEPTED_FUNCTION_ALIAS(ALIAS, NAME) \
SEEC_FUNCTION_HANDLED(ALIAS)

#include "seec/Runtimes/Tracer/InterceptedFunctions.def"
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// POSIX functions that we don't record.
//
// fcntl.h
SEEC_FUNCTION_HANDLED(open)
// sys/stat.h
SEEC_FUNCTION_HANDLED(umask)
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// OS X functions that don't need recording.
//
SEEC_FUNCTION_HANDLED(__maskrune)
SEEC_FUNCTION_HANDLED(__toupper)
SEEC_FUNCTION_HANDLED(__tolower)
//===----------------------------------------------------------------------===//

#undef SEEC_FUNCTION_HANDLED
