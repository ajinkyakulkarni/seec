root:table {
  // Contains textual descriptions of errors that can occur in the library.
  errors:table {
    // 
    ProcessTraceReadFail:string {
      "Couldn't read process trace from directory \"{path}\""
    }

    //
    ParseModuleFail:string {
      "Couldn't parse module file \"{path}\". Received the following error: {error}"
    }

    //
    FileManagerGetFileFail:string {
      "Couldn't get file from FileManager."
    }

    //
    SourceLocationInvalid:string {
      "Invalid source location."
    }

    //
    ResourcePathUnreadable:string { "Couldn't find resources directory (expected to be \"{path}\")." }

    //
    DriverBuildCompilationFailed:string { "Driver failed to build compilation." }

    //
    CompilationJobsSizeUnexpected:string { "Unexpected number of driver jobs: {size} (expected one)." }

    //
    JobCommandNull:string { "Job is not a Command." }

    //
    JobCommandNotClang:string { "Job is not clang." }
  }

  // Contains formatting for printing state information.
  states:table {
    // 
    MallocState:string { "{size} byte(s) at {address}." }

    //
    MallocStateAllocatedAt:string { "allocated in file {filename} at line {line}, column {column}." }
  }

  Graph:table {
    Layout:table {
      LEVStandard:table {
        Name:string { "Standard" }
      }
      LEVCString:table {
        Name:string { "C String" }
      }
      LEVElideUnreferenced:table {
        Name:string { "Elide unreferenced elements" }
        Elided:string { "<values elided>" }
      }
      LEVElideEmptyUnreferencedStrings:table {
        Name:string { "Elide empty unreferenced strings" }
        Elided:string { "<strings elided>" }
      }
      LEVElideUninitOrZeroElements:table {
        Name:string { "Elide uninitialized or zero values" }
        Elided:string { "<values elided>" }
      }
      LEAStandard:table {
        Name:string { "Standard" }
      }
      LEACString:table {
        Name:string { "C String" }
      }
    }
  }
}
