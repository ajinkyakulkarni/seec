root:table {
  // Describes errors that can occur in the library.
  errors:table {
    ExplainNullDecl:string { "Decl is null." }

    CreateDeclUnknownDeclKind:string { "Decl has unknown kind." }


    ExplainNullStmt:string { "Stmt is null." }

    CreateStmtNoStmtClass:string { "Stmt has no class." }

    CreateStmtUnknownStmtClass:string { "Stmt has unknown class." }


    DescriptionNotFound:string { "Couldn't find description for key {key}." }

    DescriptionFormatFailed:string { "Couldn't format description with key {key}." }

    DescriptionIndexFailed:string { "Couldn't index description with key {key}." }
  }

  // Contains textual descriptions of clang AST nodes.
  descriptions:table {

    //-------------------
    // Decl descriptions.
    //-------------------

    // Function description.
    //
    Function:string { "This is a function declaration." }


    //-------------------
    // Stmt descriptions.
    //-------------------

    // BinaryOperator description.
    // Inputs:
    //   opcode
    // Outputs:
    //   lhs
    //   rhs
    //
    BinaryOperator:string {
      "{opcode, select,"
      " BO_Mul {This is the multiplication operator *. The result of this expression is the value of the @[lhs]left hand side@[] multiplied by the value of the @[rhs]right hand side@[].}"
      " other {This is the binary operator {opcode}. It has a @[lhs]left hand side@[] and a @[rhs]right hand side@[].}}"
    }

    // DeclRefExpr description.
    // Inputs:
    //   name = string
    //   kind_general = "Var" | "Function" | "EnumConstant" | "Other"
    // Inputs (when kind_general == "Var"):
    //   has_definition
    // Inputs (when kind_general == "Function"):
    //   has_body
    // Inputs (when kind_general == "EnumConstant"):
    //   init_val
    // Outputs:
    //   decl
    //   found_decl
    //
    DeclRefExpr:string {
      "{kind_general, select,"
      " Var {This refers to the variable @[decl]“{name}”@[].}"
      " Function {This refers to the function @[decl]“{name}”@[].}"
      " EnumConstant {This refers to the enum constant @[decl]“{name}”@[].}"
      " other {This is a reference to the declaration @[decl]“{name}”@[].}}"
    }

    // IfStmt description.
    // Inputs:
    //   has_condition_variable
    //   has_else
    // Outputs:
    //   cond
    //   then
    //   else
    //
    IfStmt:string {
      "This is an if statement. It consists of a @[cond]condition@[], a @[then]body statement@[], and an optional @[else]else statement@[]. If the @[cond]condition@[] evaluates to a value that is considered to be true, then the @[then]body statement@[] will be executed, otherwise the @[else]else statement@[] will be executed (if it exists)."
      "{has_else, select, true { This if statement has an else branch.} false { This if statement does not have an else branch.} other { Very sad.}}"
    }

    // ReturnStmt description.
    // Inputs:
    //   has_return_value
    // Outputs:
    //   current_function
    //   called_from
    //   return_value
    //
    ReturnStmt:string {
      "This is a return statement. It ends the execution of the @[current_function]current function@[], returning control to the @[called_from]caller of this function@[]. If a value is returned, then it will be received at the site where this function was called. If this is the main function, then the program will end."
      "{has_return_value, select, true { This return statement @[return_value]returns a value@[].} false { This return statement does not return a value.} other { Very sad.}}"
    }

  }
}
