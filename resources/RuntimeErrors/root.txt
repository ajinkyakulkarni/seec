root:table {
  // Contains textual descriptions of runtime errors.
  descriptions:table {
    // select MemoryAccess {read, write}
    // address
    // size
    MemoryUnowned:string {
      "{access_type, select, "
        "read {Attempt to read unowned memory at address {address} ({size} bytes).}"
        "write {Attempt to write unowned memory at address {address} ({size} bytes).}"
        "other {Attempt to {access_type} unowned memory at address {address} ({size} bytes).}"
      "}"
    }

    // address
    // size
    MemoryUninitialized:string {
      "Read uninitialized memory from address {address} ({size} bytes)."
    }

    // select MemoryAccess {read, write}
    // access address
    // access size
    // object
    // object address
    // object size
    MemoryOverflow:string {
      "Attempt to {access_type} memory at address {access_address} ({access_size} bytes) overflows object at address {object_address} ({object_size} bytes).}"
    }

    // dynamic memory function
    // address
    BadDynamicMemoryAddress:string {
      "{function, select, "
        "free {Bad address {address} given to free.}"
        "realloc {Bad address {address} given to realloc.}"
        "other {Bad address {address} given to function {function}.}"
      "}"
    }

    // function name
    // overlap address
    // overlap size
    OverlappingSourceDest:string {
      "Function {function} source and destination memory blocks overlap at address {address} ({size} bytes)."
    }

    // string function name
    // address of invalid string
    // index of the argument that held the pointer
    InvalidCString:string {
      "Address {address}, passed to parameter {parameter} of function {function}, does not refer to a C string."
    }
    
    // dummy
    DivideByZero:string {
      "Divide by zero!"
    }

    // dummy
    IntegerOverflow:string {
      "Integer overflow!"
    }

    // dummy
    IntegerUnderflow:string {
      "Integer underflow!"
    }

    // function
    // address
    // parameter
    PassPointerToUnowned:string {
      "Parameter {parameter} passed to function {function} points to unowned memory at address {address}."
    }

    // function
    // address
    // parameter
    PassPointerToUninitialized:string {
      "Parameter {parameter} passed to function {function} points to uninitialized memory at address {address}."
    }
  }
}
