root:table {
  // Contains textual descriptions of runtime errors.
  descriptions:table {
    // function
    InfoCStdFunction:string { "Note: Error was raised by call to function {function}." }

    // function
    // parameter
    InfoCStdFunctionParameter {
      "{function, select, "
        "strcpy {"
          "{parameter, plural, "
            "=1    {Note: Error was raised for the @[parameter=1]destination parameter@[] passed to strcpy (first parameter).}"
            "=2    {Note: Error was raised for the @[parameter=2]source parameter@[] passed to strcpy (second parameter).}"
            "other {Note: Error was raised for @[parameter={parameter}]parameter {parameter}@[] passed to strcpy.}}}"
        "other {"
          "{parameter, plural, "
            "=1    {Note: Error was raised for the @[arg:parameter]first parameter@[] passed to function {function}.}"
            "=2    {Note: Error was raised for the @[arg:parameter]second parameter@[] passed to function {function}.}"
            "=3    {Note: Error was raised for the @[arg:parameter]third parameter@[] passed to function {function}.}"
            "=4    {Note: Error was raised for the @[arg:parameter]fourth parameter@[] passed to function {function}.}"
            "=5    {Note: Error was raised for the @[arg:parameter]fifth parameter@[] passed to function {function}.}"
            "=6    {Note: Error was raised for the @[arg:parameter]sixth parameter@[] passed to function {function}.}"
            "=7    {Note: Error was raised for the @[arg:parameter]seventh parameter@[] passed to function {function}.}"
            "=8    {Note: Error was raised for the @[arg:parameter]eighth parameter@[] passed to function {function}.}"
            "=9    {Note: Error was raised for the @[arg:parameter]ninth parameter@[] passed to function {function}.}"
            "=10   {Note: Error was raised for the @[arg:parameter]tenth parameter@[] passed to function {function}.}"
            "other {Note: Error was raised for @[arg:parameter]parameter {parameter}@[] passed to function {function}.}}}"
      "}"
    }

    // element
    InfoElementOfArray {
      "Note: Error was detected with array element with index {element}."
    }

    // select MemoryAccess {read, write}
    // address
    // size
    MemoryUnowned:string {
      "{access_type, select, "
        "read {{address, select, "
          "NULL {Attempt to dereference NULL pointer for memory read.}"
          "other {Attempt to read unallocated memory ({size, plural, =1 {one byte} other {{size} bytes}}).}}}"
        "write {{address, select, "
          "NULL {Attempt to dereference NULL pointer for memory write.}"
          "other {Attempt to write unallocated memory ({size, plural, =1 {one byte} other {{size} bytes}}).}}}"
        "other {{address, select, "
          "NULL {Attempt to dereference NULL pointer.}"
          "other {Attempt to {access_type} unallocated memory ({size, plural, =1 {one byte} other {{size} bytes}}).}}}"
      "}"
    }

    // address
    // size
    MemoryUninitialized:string {
      "Read uninitialized memory (while reading {size, plural, =1 {one byte} other {{size} bytes}})."
    }

    // access_type {read, write}
    // access_address
    // access_size
    // object
    // object_address
    // object_size
    MemoryOverflow:string {
      "{access_type, select, "
       "read  {Attempt to read memory overflows object.}"
       "write {Attempt to write memory overflows object.}"
       "other {Attempt to access memory overflows object.}"
      "}"
    }

    // dynamic memory function
    // address
    BadDynamicMemoryAddress:string {
      "{function, select, "
        "free {Attempting to free memory that is not dynamically allocated.}"
        "realloc {Attempting to realloc memory that is not dynamically allocated.}"
        "other {Invalid pointer given to function {function}.}"
      "}"
    }

    // function name
    // overlap address
    // overlap size
    OverlappingSourceDest:string {
      "Source and destination memory blocks overlap ({size, plural, =1 {one byte overlaps}, other {{size} bytes overlap}})."
    }

    // string function name
    // address of invalid string
    // index of the argument that held the pointer
    InvalidCString:string {
      "Pointer passed to function does not refer to a valid C string. A C string must be terminated by a NULL character."
    }

    // dummy
    DivideByZero:string {
      "Division by zero. This causes undefined behaviour."
    }

    // dummy
    IntegerOverflow:string {
      "Integer overflow."
    }

    // dummy
    IntegerUnderflow:string {
      "Integer underflow."
    }

    // address
    PointerObjectNULL:string {
      "Attempting to dereference a NULL pointer."
    }

    // object
    // address
    PointerObjectMismatch:string {
      "Attempting to dereference a pointer that no longer refers to its target object."
      " This might be caused by accessing an array using an invalid index"
      " or by incorrect use of pointer arithmetic."
    }

    // ptr_time
    // obj_time
    PointerObjectOutdated:string {
      "Attempting to dereference a pointer whose target object has been deallocated."
    }

    // object
    // address
    PointerArithmeticResultInvalid:string {
      "Result of pointer arithmetic is invalid because it does not point to the"
      " same object as the base pointer."
      " This might be caused by accessing an array using an invalid index."
    }

    // object
    PointerArithmeticOperandInvalid:string {
      "{object, select, "
       "NULL {Attempting pointer arithmetic on NULL pointer.}"
       "other {Attempting pointer arithmetic on a pointer that does not point"
              " to a valid object.}}"
    }

    // ptr_time
    // current_time
    PointerArithmeticOperandOutdated:string {
      "Attempting pointer arithmetic on a pointer whose target object has been deallocated."
    }

    // function
    // address
    // parameter
    PassPointerToUnowned:string {
      "Passing a pointer that points to unallocated memory."
      " The called function would access this memory,"
      " resulting in undefined behaviour."
    }

    // function
    // address
    // parameter
    PassPointerToUninitialized:string {
      "Passing a pointer to uninitialized memory."
      " The called function would read this memory,"
      " resulting in undefined behaviour."
    }

    // function
    // parameter
    // access_address
    // access_size
    // accessible_size
    // object
    // object_address
    // object_size
    PassPointerToInsufficient:string {
      "Pointer passed to function references an insufficient amount of memory."

      "{access_size, plural, "
        "=1    { The function required one byte,}"
        "other { The function required {access_size} bytes,}"
      "}"

      "{accessible_size, plural, "
        "=0    { but none were available.}"
        "=1    { but only one was available.}"
        "other { but only {accessible_size} were available.}"
      "}"
    }

    // function
    // parameter
    PassInvalidStream:string {
      "FILE pointer passed to function {function} is invalid."
      " Perhaps this stream was not opened successfully or was already closed?"
    }

    // function
    // stream
    UseInvalidStream:string {
      "This function call would use standard stream \"{stream}\", which is closed. Perhaps the program previously closed this stream by calling fclose({stream})?"
    }

    // function
    // parameter
    PassInvalidDIR:string {
      "DIR pointer passed as argument is invalid."
      " Perhaps this DIR was not opened successfully or was already closed?"
    }

    // function
    // parameter
    // start
    FormatSpecifierParse:string {
      "Failed to parse format specifier starting at position {start} in format string."
    }

    // function
    // parameter
    // start
    // flag
    // end
    FormatSpecifierFlag:string {
      "Invalid flag \"{flag}\" supplied to format specifier starting at position {start} in format string."
    }

    // function
    // parameter
    // start
    // end
    FormatSpecifierWidthDenied:string {
      "Width was specified for the conversion specifier starting at position {start} in format string, but this conversion specifier does not allow a width to be specified."
    }

    // function
    // parameter
    // start
    // end
    // width_parameter
    FormatSpecifierWidthArgType:string {
      "Conversion specifier starting at position {start} in format string indicated that a width would be passed as an argument (this is indicated by the '*' character)."
      " However, the argument provided (as parameter {width_parameter}) was not of type \"int\", which it is required to be."
    }

    // function
    // parameter
    // start
    // end
    FormatSpecifierWidthMissing:string {
      "Conversion specifier starting at position {start} in format string did not provide a maximum field width."
      " It is possible for this to lead to a buffer overflow (if the conversion matches more characters than can fit into the destination buffer)."
      " For safety, provide a maximum field width (as an integer written directly after the \"%\" character that begins the conversion specifier)."
    }

    // function
    // parameter
    // start
    // end
    FormatSpecifierPrecisionDenied:string {
      "A precision was specified for the conversion specifier starting at position {start} in the format string,"
      " but this conversion specifier does not allow a precision to be specified."
    }

    // function
    // parameter
    // start
    // end
    // precision_parameter
    FormatSpecifierPrecisionArgType:string {
      "The conversion specifier starting at position {start} in format string"
      " indicated that a precision would be passed as an argument"
      " (this is indicated by the '*' character following the precision character '.')."
      " However, the argument provided (as parameter {precision_parameter}) was not of type \"int\", which it is required to be."
    }

    // function
    // parameter
    // start
    // end
    // length
    FormatSpecifierLengthDenied:string {
      "Length modifier \"{length}\" was used for the conversion specifier starting at position {start} in format string,"
      " but this conversion specifier does not support this length modifier."
    }

    // function
    // parameter
    // start
    // end
    FormatSpecifierSuppressionDenied:string {
      "Assignment-suppressing character \"*\" was present in the conversion specifier starting at position {start} in format string,"
      " but this conversion specifier does not support assignment suppression."
    }

    // function
    // parameter
    // start
    // end
    // length
    // argument
    FormatSpecifierArgType:string {
      "The type of the format specifier beginning at character {start} in format string does not"
      " match the type of the corresponding argument (argument {argument})."
    }

    // function
    // format_index
    // specifier_start
    // specifier_end
    // specifier_length
    // argument
    // bytes_available
    // bytes_required
    //
    ScanFormattedStringOverflow:string {
      "An overflow occurred while matching the string conversion specifier at character {specifier_start} in the format string."
      " There {bytes_available, plural, =0 {were no bytes available} =1 {was one byte available} other {were {bytes_available} bytes available}}"
      " at the destination of the pointer given as argument {argument},"
      " but the matched string required {bytes_required, plural, =1 {one byte} other {{bytes_required} bytes}}."
      " To avoid potential overflows when using the various \"scan\" functions to match strings, one should always specify a \"maximum field width\" for the conversion."
      " The maximum field width specifies the maximum number of characters that will be used to match a conversion."
      " It is specified by placing an integer number, greater than zero, after the introductory \"%\" character."
      " For example, if we were reading into a buffer that could hold 20 characters, we would specify the maximum field width to be 19 like so: \"%19s\""
      " (note that the last character in the buffer is reserved for the terminating NULL character which will be placed at the end of the string by the scan function)."
    }

    // function
    // expected
    // received
    VarArgsSuperfluous:string {
      "Superfluous arguments passed to function. Expected "
        "{expected, plural, =0 {no variadic arguments} =1 {one variadic argument} other {{expected} variadic arguments}}"
        ", but received "
        "{received, plural, =0 {none.} =1 {only one.} other {only {received}.}}"
    }

    // function
    // expected
    // received
    VarArgsInsufficient:string {
      "Insufficient arguments passed to function. Expected "
        "{expected, plural, =1 {{expected} variadic argument} other {{expected} variadic arguments}}"
        ", but received "
        "{received, plural, =0 {none.} =1 {only one.} other {only {received}.}}"
    }

    // function
    VarArgsExpectedCharPointer:string {
      "Argument is not a character pointer, but the function {function} requires it to be."
    }

    // function
    VarArgsExpectedCStringArray:string {
      "{function, select, "
        "execle {The {function} function expects the argument list's NULL terminator to be followed by a pointer to an array of pointers to NULL-terminated character strings, each of which specifies an environment variable for the new process. The array itself is also terminated by a NULL pointer. Consult documentation of {function} for more details.}"
        "other {Argument is not a pointer to a NULL-terminated array of C strings, but the function {function} requires it to be.}}"
    }

    // function
    VarArgsNonTerminated:string {
      "The variadic argument list for this function must be terminated by a NULL pointer."
    }

    // function
    VarArgsPostTerminator:string {
      "Argument follows terminating NULL pointer and thus will not be used by called function."
    }

    // function
    UnsafeMultithreaded:string {
      "Calling this function in a multithreaded program is unsafe."
    }

    // function
    // parameter
    NonTerminatedArray:string {
      "Array passed as argument to function call is non-terminated, but the function requires it to be terminated"
      " (the last element must be a NULL pointer)."
    }

    //
    StackOverflowAlloca:string {
      "Required memory allocation would exceed the limit of the stack."
      " This may be caused by the program recursing infinitely, or by using excessively large variables."
    }
  }
}
