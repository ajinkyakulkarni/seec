//===- lib/ClangEPV/StmtLinks.def -----------------------------------------===//
//
//                                    SeeC
//
// This file is distributed under The MIT License (MIT). See LICENSE.TXT for
// details.
//
//===----------------------------------------------------------------------===//
///
/// \file X-Macro for generating input, value, and linking information for
///       explanations of Stmt nodes. The node types are ordered according to
///       the order of Clang's StmtNodes.td.
///
//===----------------------------------------------------------------------===//

#ifndef SEEC_STMT_LINK
#error "Must define SEEC_STMT_LINK"
#endif

#include "seec/Preprocessor/Quote.h"


//===----------------------------------------------------------------------===//
// Statements
//===----------------------------------------------------------------------===//

SEEC_STMT_LINK(NullStmt,
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE())

SEEC_STMT_LINK(CompoundStmt,
  SEEC_PP_QUOTE(
    ("size", Int, size())
  ),
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE())

SEEC_STMT_LINK(LabelStmt,
  SEEC_PP_QUOTE(
    ("name",         String, getName()),
    ("has_decl",     Bool,   getDecl()),
    ("has_sub_stmt", Bool,   getSubStmt())
  ),
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE(
    ("decl", getDecl()),
    ("sub_stmt", getSubStmt())
  ))

// AttributedStmt is not handled.

SEEC_STMT_LINK(IfStmt,
  SEEC_PP_QUOTE(
    ("has_condition_variable", Bool, getConditionVariable()),
    ("has_else",               Bool, getElse())
  ),
  SEEC_PP_QUOTE(
    ("rtv_of_cond", getCond())
  ),
  SEEC_PP_QUOTE(
    ("cond", getCond()),
    ("then", getThen()),
    ("else", getElse())
  ))

SEEC_STMT_LINK(SwitchStmt,
  SEEC_PP_QUOTE(
    ("has_condition_variable",    Bool, getConditionVariable()),
    ("has_cond",                  Bool, getCond()),
    ("has_body",                  Bool, getBody()),
    ("is_all_enum_cases_covered", Bool, isAllEnumCasesCovered())
  ),
  SEEC_PP_QUOTE(
    ("rtv_of_cond", getCond())
  ),
  SEEC_PP_QUOTE(
    ("cond", getCond()),
    ("body", getBody())
  ))

SEEC_STMT_LINK(WhileStmt,
  SEEC_PP_QUOTE(
    ("has_condition_variable", Bool, getConditionVariable()),
    ("has_cond",               Bool, getCond()),
    ("has_body",               Bool, getBody())
  ),
  SEEC_PP_QUOTE(
    ("rtv_of_cond", getCond())
  ),
  SEEC_PP_QUOTE(
    ("condition_variable", getConditionVariable()),
    ("cond",               getCond()),
    ("body",               getBody())
  ))

SEEC_STMT_LINK(DoStmt,
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE(
    ("rtv_of_cond", getCond())
  ),
  SEEC_PP_QUOTE(
    ("cond", getCond()),
    ("body", getBody())
  ))

SEEC_STMT_LINK(ForStmt,
  SEEC_PP_QUOTE(
    ("has_init",               Bool, getInit()),
    ("has_cond",               Bool, getCond()),
    ("has_inc",                Bool, getInc()),
    ("has_condition_variable", Bool, getConditionVariable()),
    ("has_body",               Bool, getBody())
  ),
  SEEC_PP_QUOTE(
    ("rtv_of_init", getInit()),
    ("rtv_of_cond", getCond()),
    ("rtv_of_inc",  getInc())
  ),
  SEEC_PP_QUOTE(
    ("init", getInit()),
    ("cond", getCond()),
    ("inc",  getInc()),
    ("body", getBody())
  ))

SEEC_STMT_LINK(GotoStmt,
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE(
    ("label", getLabel())
  ))

// IndirectGotoStmt is not handled.

SEEC_STMT_LINK(ContinueStmt,
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE())

SEEC_STMT_LINK(BreakStmt,
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE())

SEEC_STMT_LINK(ReturnStmt,
  SEEC_PP_QUOTE(
    ("has_return_value", Bool, getRetValue())
  ),
  SEEC_PP_QUOTE(
    ("rtv_of_return_value", getRetValue())
  ),
  SEEC_PP_QUOTE(
    ("return_value", getRetValue())
  ))

// DeclStmt is handled manually.

// SwitchCase is handled by CaseStmt and DefaultStmt, below.

SEEC_STMT_LINK(CaseStmt,
  SEEC_PP_QUOTE(
    ("has_next_switch_case", Bool, getNextSwitchCase()),
    ("has_sub_stmt",         Bool, getSubStmt()),
    ("has_lhs",              Bool, getLHS()),
    ("has_rhs",              Bool, getRHS())
  ),
  SEEC_PP_QUOTE(
    ("rtv_of_lhs", getLHS()),
    ("rtv_of_rhs", getRHS())
  ),
  SEEC_PP_QUOTE(
    ("next_switch_case", getNextSwitchCase()),
    ("sub_stmt",         getSubStmt()),
    ("lhs",              getLHS()),
    ("rhs",              getRHS())
  ))

SEEC_STMT_LINK(DefaultStmt,
  SEEC_PP_QUOTE(
    ("has_next_switch_case", Bool, getNextSwitchCase()),
    ("has_sub_stmt",         Bool, getSubStmt())
  ),
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE(
    ("next_switch_case", getNextSwitchCase()),
    ("sub_stmt",         getSubStmt())
  ))


//===----------------------------------------------------------------------===//
// Asm statements are not handled
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// Obj-C statements are not handled
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// C++ statements are not handled
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// Expressions
//===----------------------------------------------------------------------===//

SEEC_STMT_LINK(PredefinedExpr,
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE())

// DeclRefExpr is handled manually.

SEEC_STMT_LINK(IntegerLiteral,
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE())

SEEC_STMT_LINK(FloatingLiteral,
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE())

SEEC_STMT_LINK(ImaginaryLiteral,
  SEEC_PP_QUOTE(
    ("sub_expr_type_general",
     GeneralTypeString,
     getSubExpr()->getType().getTypePtr())
  ),
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE(
    ("sub_expr", getSubExpr())
  ))

SEEC_STMT_LINK(StringLiteral,
  SEEC_PP_QUOTE(
    ("string",           String, getString()),
    ("byte_length",      Int,    getByteLength()),
    ("length",           Int,    getLength()),
    ("char_byte_width",  Int,    getCharByteWidth()),
    ("string_kind",      String, getKind()),
    ("num_concatenated", Int,    getNumConcatenated())
  ),
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE())

SEEC_STMT_LINK(CharacterLiteral,
  SEEC_PP_QUOTE(
    ("character_kind", String, getKind()),
    ("type",           String, getType().getTypePtr())
  ),
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE())

SEEC_STMT_LINK(ParenExpr,
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE(
    ("sub_expr", getSubExpr())
  ))

SEEC_STMT_LINK(UnaryOperator,
  SEEC_PP_QUOTE(
    ("opcode", String, getOpcode()),
    ("is_prefix", Bool, isPrefix()),
    ("is_postfix", Bool, isPostfix()),
    ("is_increment_op", Bool, isIncrementOp()),
    ("is_decrement_op", Bool, isDecrementOp()),
    ("is_increment_decrement_op", Bool, isIncrementDecrementOp()),
    ("is_arithmetic_op", Bool, isArithmeticOp())
  ),
  SEEC_PP_QUOTE(
    ("rtv_of_sub_expr", getSubExpr())
  ),
  SEEC_PP_QUOTE(
    ("sub_expr", getSubExpr())
  ))

SEEC_STMT_LINK(OffsetOfExpr,
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE())

// UnaryExprOrTypeTraitExpr is handled manually.

// ArraySubscriptExpr is handled manually.

// CallExpr is handled manually.

SEEC_STMT_LINK(MemberExpr,
  SEEC_PP_QUOTE(
    ("member_decl_name", String, getMemberDecl()->getName()),
    ("is_arrow",         Bool,   isArrow())
  ),
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE(
    ("base",        getBase()),
    ("member_decl", getMemberDecl())
  ))

// CastExpr is handled by the derived expressions.

SEEC_STMT_LINK(BinaryOperator,
  SEEC_PP_QUOTE(
    ("opcode",       String,            getOpcode()),
    ("type_general", GeneralTypeString, getType().getTypePtr())
  ),
  SEEC_PP_QUOTE(
    ("rtv_of_lhs", getLHS()),
    ("rtv_of_rhs", getRHS())
  ),
  SEEC_PP_QUOTE(
    ("lhs", getLHS()),
    ("rhs", getRHS())
  ))

SEEC_STMT_LINK(CompoundAssignOperator,
  SEEC_PP_QUOTE(
    ("opcode",       String,            getOpcode()),
    ("type_general", GeneralTypeString, getType().getTypePtr())
  ),
  SEEC_PP_QUOTE(
    ("rtv_of_lhs", getLHS()),
    ("rtv_of_rhs", getRHS())
  ),
  SEEC_PP_QUOTE(
    ("lhs", getLHS()),
    ("rhs", getRHS())
  ))

SEEC_STMT_LINK(ConditionalOperator,
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE(
    ("cond",       getCond()),
    ("true_expr",  getTrueExpr()),
    ("false_expr", getFalseExpr())
  ))

// TODO: BinaryConditionalOperator
SEEC_STMT_LINK(BinaryConditionalOperator,
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE())

SEEC_STMT_LINK(ImplicitCastExpr,
  SEEC_PP_QUOTE(
    ("cast_kind_name", String, getCastKindName()),
    ("type",           String, getType().getTypePtr())
  ),
  SEEC_PP_QUOTE(
    ("rtv_of_sub_expr", getSubExpr()),
    ("rtv_of_sub_expr_as_written", getSubExprAsWritten())
  ),
  SEEC_PP_QUOTE(
    ("sub_expr", getSubExpr()),
    ("sub_expr_as_written", getSubExprAsWritten())
  ))

// ExplicitCastExpr is handled by the derived expressions.

SEEC_STMT_LINK(CStyleCastExpr,
  SEEC_PP_QUOTE(
    ("cast_kind_name",  String, getCastKindName()),
    ("type",            String, getType().getTypePtr()),
    ("type_as_written", String, getTypeAsWritten().getAsString())
  ),
  SEEC_PP_QUOTE(
    ("rtv_of_sub_expr", getSubExpr()),
    ("rtv_of_sub_expr_as_written", getSubExprAsWritten())
  ),
  SEEC_PP_QUOTE(
    ("sub_expr", getSubExpr()),
    ("sub_expr_as_written", getSubExprAsWritten())
  ))

SEEC_STMT_LINK(CompoundLiteralExpr,
  SEEC_PP_QUOTE(
    ("type", String, getType().getTypePtr())
  ),
  SEEC_PP_QUOTE(
    ("rtv_of_init", getInitializer())
  ),
  SEEC_PP_QUOTE(
    ("init", getInitializer())
  ))

// ExtVectorElementExpr is not handled.

// TODO: InitListExpr.
SEEC_STMT_LINK(InitListExpr,
  SEEC_PP_QUOTE(
    ("type", String, getType().getTypePtr()),
    ("is_string_literal_init", Bool, isStringLiteralInit()),
    ("had_array_range_designator", Bool, hadArrayRangeDesignator())
  ),
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE(
    ("initialized_field_in_union", getInitializedFieldInUnion())
  ))

// TODO: DesignatedInitExpr.
SEEC_STMT_LINK(DesignatedInitExpr,
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE())

// TODO: ImplicitValueInitExpr.
SEEC_STMT_LINK(ImplicitValueInitExpr,
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE())

// TODO: ParenListExpr.
SEEC_STMT_LINK(ParenListExpr,
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE())

// TODO: VAArgExpr.
SEEC_STMT_LINK(VAArgExpr,
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE())

// TODO: GenericSelectionExpr.
SEEC_STMT_LINK(GenericSelectionExpr,
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE())

// TODO: PseudoObjectExpr.
SEEC_STMT_LINK(PseudoObjectExpr,
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE(),
  SEEC_PP_QUOTE())


//===----------------------------------------------------------------------===//
// Atomic expressions are not handled.
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// GNU Extensions are not handled.
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// C++ Expressions are not handled.
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// Obj-C Expressions are not handled.
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// Obj-C ARC Expressions are not handled.
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// CUDA Expressions are not handled.
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// Clang Extensions are not handled.
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// Microsoft Extensions are not handled.
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// OpenCL Extensions are not handled.
//===----------------------------------------------------------------------===//


#undef SEEC_STMT_LINK
