language: cpp

os:
  - linux
  - osx

compiler:
  - clang
  - gcc

matrix:
  exclude:
    - os: osx
      compiler: gcc

#
# Cache dependency installations.
#
cache:
  directories:
    - $HOME/deps/install

#
# We need a more recent version of GCC to build.
#
addons:
 apt:
   sources:
   - ubuntu-toolchain-r-test
   packages:
   - gcc-4.8
   - g++-4.8
   - libicu-dev
   - libwebkitgtk-dev

before_install:
  - SEEC_CLANG_RELEASE_TAG="v38_0.1.0"
  - ICU_SOURCE_URL="http://download.icu-project.org/files/icu4c/57rc/icu4c-57rc-src.tgz"
  - CMAKE_URL="http://www.cmake.org/files/v3.3/cmake-3.3.2-Linux-x86_64.tar.gz"
  - WXWIDGETS_VERSION_TAG="v3.0.2"
  - SEEC_VERSION_STRING="0.30.0"
  - if [ "$CXX" = "g++" ]; then export CXX="g++-4.8" CC="gcc-4.8"; fi

install:
  - DEPS_DIR="${HOME}/deps"
  - DEPS_SRC="${DEPS_DIR}/src"
  - DEPS_BUILD="${DEPS_DIR}/build"
  - DEPS_INSTALL="${DEPS_DIR}/install"
  - mkdir -p ${DEPS_DIR}
  - mkdir -p ${DEPS_SRC}
  - mkdir -p ${DEPS_BUILD}
  - mkdir -p ${DEPS_INSTALL}

# 
# LLVM needs a more recent version of CMake. This code comes from the following
# answer about installing an updated CMake:
#   http://stackoverflow.com/a/33203355
#
  - |
    cd ${DEPS_INSTALL}
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      if [ ! -d "cmake" ]; then
        mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      fi
      export PATH=${DEPS_INSTALL}/cmake/bin:${PATH}
    else
      brew install cmake
    fi
#
# Download pre-built LLVM+SeeC-Clang.
#
  - |
    cd ${DEPS_INSTALL}
    if [ ! -d "include/llvm" ]; then
      SEEC_CLANG_BUILT_XZ_FILENAME="seec_clang_travis_build_${TRAVIS_OS_NAME}_${CC}.tar.xz"
      travis_retry wget --no-check-certificate --quiet -O - https://github.com/seec-team/seec-clang/releases/download/${SEEC_CLANG_RELEASE_TAG}/${SEEC_CLANG_BUILT_XZ_FILENAME} | tar -xJ
    fi
#
# For OS X, we also need to build and install ICU.
#
  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      ICU_INSTALL_DIR="${DEPS_INSTALL}"
      if [ ! -e "${ICU_INSTALL}/bin/icu-config" ]; then
        cd ${DEPS_SRC}
        ICU_SOURCE_URL="http://download.icu-project.org/files/icu4c/57rc/icu4c-57rc-src.tgz"
        travis_retry wget --no-check-certificate --quiet -O - ${ICU_SOURCE_URL} | tar -x
        cd icu/source
        chmod +x runConfigureICU configure install-sh
        ./runConfigureICU MacOSX --enable-static --disable-shared --prefix=${ICU_INSTALL_DIR} CXXFLAGS="-std=c++11"
        make -j2 && make install
      fi
    else
      ICU_INSTALL_DIR="/usr"
    fi
#
# Download, build and install wxWidgets
#
  - |
    if [ ! -e "${DEPS_INSTALL}/bin/wx-config" ]; then
      cd ${DEPS_SRC}
      git clone https://github.com/wxWidgets/wxWidgets.git wxWidgets
      cd wxWidgets
      git checkout ${WXWIDGETS_VERSION_TAG}
      cd ${DEPS_BUILD}
      mkdir wxWidgets && cd wxWidgets
      if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
        ${DEPS_SRC}/wxWidgets/configure --disable-shared --enable-webview --without-libtiff --without-regex --enable-stl CFLAGS="-fPIC" CXXFLAGS="-std=c++11 -fPIC -fvisibility-inlines-hidden" --prefix=${DEPS_INSTALL}
      elif [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
        ${DEPS_SRC}/wxWidgets/configure --disable-shared --enable-webview --without-libtiff --without-regex --enable-stl CFLAGS="-fPIC" CXXFLAGS="-std=c++11 -stdlib=libc++ -fPIC -fvisibility-inlines-hidden" OBJCXXFLAGS="-std=c++11 -stdlib=libc++ -fPIC -fvisibility-inlines-hidden" LDFLAGS="-stdlib=libc++" --with-macosx-version-min=10.7 --prefix=${DEPS_INSTALL}
      fi
      make -j2
      make install
    fi
#
# Configure the SeeC build.
#
before_script:
  - |
    cd ${HOME}
    mkdir seec-build && cd seec-build
    cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_DIR=${DEPS_INSTALL}/share/llvm/cmake -DWX_INSTALL=${DEPS_INSTALL} -DICU_INSTALL=${ICU_INSTALL_DIR} -DCMAKE_INSTALL_PREFIX=${HOME}/seec-install ${TRAVIS_BUILD_DIR}
#
# Build using the makefiles previously generated by CMake.
#
script:
  - cd ${HOME}/seec-build
  - make

#
# If the build is successful, install SeeC and run the tests.
#
after_success:
  - |
    mkdir -p ${HOME}/seec-install
    mkdir -p ${HOME}/seec-test
    cd ${HOME}/seec-build
    make install
    cd ${HOME}/seec-test
    cmake -DSEEC_INSTALL=${HOME}/seec-install ${TRAVIS_BUILD_DIR}/tests
    make && make test

  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      OSX_PACKAGE_DIR=${HOME}/seec-osx-package
      mkdir -p ${OSX_PACKAGE_DIR}
      cd ${OSX_PACKAGE_DIR}
      ${TRAVIS_BUILD_DIR}/packaging/osx/package_seec.sh ${SEEC_VERSION_STRING} ${HOME}/seec-install /Applications
    fi

#
# For OS X, if this is tagged, then upload the package to GitHub.
#
deploy:
  provider: releases
  api_key:
    secure: sfv/wVHWC0nuKqV95HeqA50NLK/rpR7jKy42MTMdG1gvU7IYdzAkav7fOk9lCs6rWKHdpVA9XBUk2nd6pNPm6/iYZH/VczzYQQv8/9Rsh2gYkvn/aGoSgJ7GzjUzs5L+EUbOHtEI/ddURSQQ6JDDk1qMJh+E2wlEr8nuAn+rJen/xTfB5YU+qkliBHR0Qm/P3iVm6OZapXFNG3/8G4mQagYDISc3DUuRnkjBMcFtb2bUlBh465vzXUHH0qik9Nw7jLKYSqcvpNDIBMAD/0PxGCRmnDhaCGUVx9UVCooNgmfBNd2pZWIDHGbCPDkNGeu3+KRbdwol3jV6MlRfVpafI6vO7b/ujFBgw7rm7MwwcKMIIpMXrD3HwDFy+/dTZVFz8+jOuH7pqjl4L1soIItGPYW67A7UshtTOegLBDRoj/BIv3ZlwOFr0WWe0XYmfL2on/nvmwhw0yhTIEH7I5knCex+xrpiUnPuDdfM1Hj308QD9AmJahWmZl0DgEe3GIvHN9kBVNtdBL5nsYPWpz75FpVXpI5sKLpgwHIJCIOFjjDCoMy+MKD7r+5w2poz18yfzvNfHxHNFOZ1NobGLPOFgNNUx8YTopzYybx9+2oeAHGErLWKBpWCpp00/28uvp9aGKwiNMFf2Az853Pb2GLDXK/WxlPYjsJu8xJ7MjCd3dM=
  file: "${OSX_PACKAGE_DIR}/seec-${SEEC_VERSION_STRING}.pkg"
  skip_cleanup: true
  on:
    condition: "${TRAVIS_OS_NAME} = osx"
    tags: true
    repo: seec-team/seec

